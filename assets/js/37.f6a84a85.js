(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{501:function(e,t,a){"use strict";a.r(t);var s=a(6),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"regexp-no-lazy-ends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regexp-no-lazy-ends"}},[e._v("#")]),e._v(" regexp/no-lazy-ends")]),e._v(" "),a("blockquote",[a("p",[e._v("disallow lazy quantifiers at the end of an expression")])]),e._v(" "),a("h2",{attrs:{id:"rule-details"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rule-details"}},[e._v("#")]),e._v(" üìñ Rule Details")]),e._v(" "),a("p",[e._v("If a lazily quantified element is the last element matched by an expression\n(e.g. the "),a("code",[e._v("a{2,3}?")]),e._v(" in "),a("code",[e._v("b+a{2,3}?")]),e._v("), we know that the lazy quantifier will\nalways only match the element the minimum number of times. The maximum is\ncompletely ignored because the expression can accept after the minimum was\nreached.")]),e._v(" "),a("p",[e._v("If the minimum of the lazy quantifier is 0, we can even remove the quantifier\nand the quantified element without changing the meaning of the pattern. E.g.\n"),a("code",[e._v("a+b*?")]),e._v(" and "),a("code",[e._v("a+")]),e._v(" behave the same.")]),e._v(" "),a("p",[e._v("If the minimum is 1, we can remove the quantifier. E.g. "),a("code",[e._v("a+b+?")]),e._v(" and "),a("code",[e._v("a+b")]),e._v(" behave\nthe same.")]),e._v(" "),a("p",[e._v("If the minimum is greater than 1, we can replace the quantifier with a constant,\ngreedy quantifier. E.g. "),a("code",[e._v("a+b{2,4}?")]),e._v(" and "),a("code",[e._v("a+b{2}")]),e._v(" behave the same.")]),e._v(" "),a("eslint-code-block",[a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/* eslint regexp/no-lazy-ends: "error" */')]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* ‚úì GOOD */")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("a+?b*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("a??(?:ba+?|c)*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("ba*?$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* ‚úó BAD */")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("a??")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("a+b+?")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("a(?:c|ab+?)?")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),e._v("\n")])])])]),e._v(" "),a("h2",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" üîß Options")]),e._v(" "),a("p",[e._v("Nothing.")]),e._v(" "),a("h2",{attrs:{id:"compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compatibility"}},[e._v("#")]),e._v(" ‚ù§Ô∏è Compatibility")]),e._v(" "),a("p",[e._v("This rule was taken from "),a("a",{attrs:{href:"https://github.com/RunDevelopment/eslint-plugin-clean-regex",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint-plugin-clean-regex"),a("OutboundLink")],1),e._v("."),a("br"),e._v("\nThis rule is compatible with "),a("a",{attrs:{href:"https://github.com/RunDevelopment/eslint-plugin-clean-regex/blob/master/docs/rules/no-lazy-ends.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("clean-regex/no-lazy-ends"),a("OutboundLink")],1),e._v(" rule.")]),e._v(" "),a("h2",{attrs:{id:"version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[e._v("#")]),e._v(" üöÄ Version")]),e._v(" "),a("p",[e._v("This rule was introduced in eslint-plugin-regexp v0.8.0")]),e._v(" "),a("h2",{attrs:{id:"implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[e._v("#")]),e._v(" üîç Implementation")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/lib/rules/no-lazy-ends.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rule source"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/ota-meshi/eslint-plugin-regexp/blob/master/tests/lib/rules/no-lazy-ends.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Test source"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);t.default=r.exports}}]);